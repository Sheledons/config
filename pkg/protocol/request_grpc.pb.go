// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: request.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamConfigServiceClient is the client API for StreamConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamConfigServiceClient interface {
	ConfigChannel(ctx context.Context, opts ...grpc.CallOption) (StreamConfigService_ConfigChannelClient, error)
}

type streamConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamConfigServiceClient(cc grpc.ClientConnInterface) StreamConfigServiceClient {
	return &streamConfigServiceClient{cc}
}

func (c *streamConfigServiceClient) ConfigChannel(ctx context.Context, opts ...grpc.CallOption) (StreamConfigService_ConfigChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamConfigService_ServiceDesc.Streams[0], "/protocol.StreamConfigService/ConfigChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamConfigServiceConfigChannelClient{stream}
	return x, nil
}

type StreamConfigService_ConfigChannelClient interface {
	Send(*StreamPacket) error
	Recv() (*StreamPacket, error)
	grpc.ClientStream
}

type streamConfigServiceConfigChannelClient struct {
	grpc.ClientStream
}

func (x *streamConfigServiceConfigChannelClient) Send(m *StreamPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamConfigServiceConfigChannelClient) Recv() (*StreamPacket, error) {
	m := new(StreamPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamConfigServiceServer is the server API for StreamConfigService service.
// All implementations must embed UnimplementedStreamConfigServiceServer
// for forward compatibility
type StreamConfigServiceServer interface {
	ConfigChannel(StreamConfigService_ConfigChannelServer) error
	mustEmbedUnimplementedStreamConfigServiceServer()
}

// UnimplementedStreamConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamConfigServiceServer struct {
}

func (UnimplementedStreamConfigServiceServer) ConfigChannel(StreamConfigService_ConfigChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method ConfigChannel not implemented")
}
func (UnimplementedStreamConfigServiceServer) mustEmbedUnimplementedStreamConfigServiceServer() {}

// UnsafeStreamConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamConfigServiceServer will
// result in compilation errors.
type UnsafeStreamConfigServiceServer interface {
	mustEmbedUnimplementedStreamConfigServiceServer()
}

func RegisterStreamConfigServiceServer(s grpc.ServiceRegistrar, srv StreamConfigServiceServer) {
	s.RegisterService(&StreamConfigService_ServiceDesc, srv)
}

func _StreamConfigService_ConfigChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamConfigServiceServer).ConfigChannel(&streamConfigServiceConfigChannelServer{stream})
}

type StreamConfigService_ConfigChannelServer interface {
	Send(*StreamPacket) error
	Recv() (*StreamPacket, error)
	grpc.ServerStream
}

type streamConfigServiceConfigChannelServer struct {
	grpc.ServerStream
}

func (x *streamConfigServiceConfigChannelServer) Send(m *StreamPacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamConfigServiceConfigChannelServer) Recv() (*StreamPacket, error) {
	m := new(StreamPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamConfigService_ServiceDesc is the grpc.ServiceDesc for StreamConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.StreamConfigService",
	HandlerType: (*StreamConfigServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConfigChannel",
			Handler:       _StreamConfigService_ConfigChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "request.proto",
}
